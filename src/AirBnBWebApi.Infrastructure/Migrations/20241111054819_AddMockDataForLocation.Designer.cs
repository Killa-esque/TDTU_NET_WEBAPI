// <auto-generated />
using System;
using AirBnBWebApi.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AirBnBWebApi.Infrastructure.Migrations
{
    [DbContext(typeof(AirBnBDbContext))]
    [Migration("20241111054819_AddMockDataForLocation")]
    partial class AddMockDataForLocation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AirBnBWebApi.Core.Entities.KeyToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PrivateKey")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicKey")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.ToTable("KeyTokens");
                });

            modelBuilder.Entity("AirBnBWebApi.Core.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GoogleMapsUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("City", "Country")
                        .IsUnique();

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("058a5dde-bc40-4689-8ae8-8df50ff44c59"),
                            City = "Hà Nội",
                            Country = "Vietnam",
                            GoogleMapsUrl = "https://goo.gl/maps/jxEMENK67fq",
                            Latitude = 21.028511000000002,
                            Longitude = 105.85416600000001
                        },
                        new
                        {
                            Id = new Guid("5ccd4418-3eac-48e5-ad7a-8248a1028ea1"),
                            City = "Hồ Chí Minh",
                            Country = "Vietnam",
                            GoogleMapsUrl = "https://goo.gl/maps/KdfV2N6pK3t",
                            Latitude = 10.823098999999999,
                            Longitude = 106.629662
                        },
                        new
                        {
                            Id = new Guid("2165fd0f-ba6b-425c-b95d-6909344c1b01"),
                            City = "Đà Nẵng",
                            Country = "Vietnam",
                            GoogleMapsUrl = "https://goo.gl/maps/jDgHbPzRJmF2",
                            Latitude = 16.047079,
                            Longitude = 108.20623000000001
                        },
                        new
                        {
                            Id = new Guid("f6ff8121-1829-4195-8a0b-d5764518dcde"),
                            City = "Nha Trang",
                            Country = "Vietnam",
                            GoogleMapsUrl = "https://goo.gl/maps/P6c6t9enTjN2",
                            Latitude = 12.238791000000001,
                            Longitude = 109.196749
                        },
                        new
                        {
                            Id = new Guid("ec53d2e9-8df9-4742-8b39-781113d34167"),
                            City = "Huế",
                            Country = "Vietnam",
                            GoogleMapsUrl = "https://goo.gl/maps/vjAexGdMk4y",
                            Latitude = 16.463712999999998,
                            Longitude = 107.59086600000001
                        },
                        new
                        {
                            Id = new Guid("8865c6fc-6bd6-4253-9534-09a97133a856"),
                            City = "Hải Phòng",
                            Country = "Vietnam",
                            GoogleMapsUrl = "https://goo.gl/maps/tx1xaTghmNn",
                            Latitude = 20.844911,
                            Longitude = 106.688084
                        },
                        new
                        {
                            Id = new Guid("b5329932-fc35-4268-a559-6fbea94e9155"),
                            City = "Cần Thơ",
                            Country = "Vietnam",
                            GoogleMapsUrl = "https://goo.gl/maps/z8qFN7uX1p8",
                            Latitude = 10.045161999999999,
                            Longitude = 105.74685700000001
                        },
                        new
                        {
                            Id = new Guid("efa29842-ab16-41ae-841e-a195c2ad86df"),
                            City = "Đà Lạt",
                            Country = "Vietnam",
                            GoogleMapsUrl = "https://goo.gl/maps/jNcHFytCmTs",
                            Latitude = 11.940419,
                            Longitude = 108.4345
                        },
                        new
                        {
                            Id = new Guid("fc31ddd5-84cc-46d0-8a3b-bab9786f6805"),
                            City = "Vũng Tàu",
                            Country = "Vietnam",
                            GoogleMapsUrl = "https://goo.gl/maps/wAeDf7aVx1r",
                            Latitude = 10.346,
                            Longitude = 107.08499999999999
                        },
                        new
                        {
                            Id = new Guid("6f3da73d-a10d-4e02-9bd9-02ef6e4fbaac"),
                            City = "Phú Quốc",
                            Country = "Vietnam",
                            GoogleMapsUrl = "https://goo.gl/maps/Kdtq7fbpK5t",
                            Latitude = 10.289899999999999,
                            Longitude = 103.9644
                        });
                });

            modelBuilder.Entity("AirBnBWebApi.Core.Entities.Property", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AirConditioning")
                        .HasColumnType("bit");

                    b.Property<int>("Bathrooms")
                        .HasColumnType("int");

                    b.Property<int>("Bedrooms")
                        .HasColumnType("int");

                    b.Property<int>("Beds")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Guests")
                        .HasColumnType("int");

                    b.Property<Guid>("HostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<bool>("Kitchen")
                        .HasColumnType("bit");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Parking")
                        .HasColumnType("bit");

                    b.Property<string>("PropertyDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PropertyPricePerNight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PropertyStatus")
                        .HasColumnType("int");

                    b.Property<int>("PropertyType")
                        .HasColumnType("int");

                    b.Property<bool>("SwimmingPool")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Wifi")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("AirBnBWebApi.Core.Entities.PropertyImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyImages");
                });

            modelBuilder.Entity("AirBnBWebApi.Core.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceInfo")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("AirBnBWebApi.Core.Entities.RefreshTokenUsed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeviceInfo")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("UsedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokensUsed");
                });

            modelBuilder.Entity("AirBnBWebApi.Core.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("AirBnBWebApi.Core.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("AirBnBWebApi.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AccountLockedUntil")
                        .HasColumnType("datetime2");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Avatar")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AirBnBWebApi.Core.Entities.UserMetadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserMetadata");
                });

            modelBuilder.Entity("AirBnBWebApi.Core.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("AirBnBWebApi.Core.Entities.KeyToken", b =>
                {
                    b.HasOne("AirBnBWebApi.Core.Entities.User", "User")
                        .WithOne("KeyToken")
                        .HasForeignKey("AirBnBWebApi.Core.Entities.KeyToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AirBnBWebApi.Core.Entities.Property", b =>
                {
                    b.HasOne("AirBnBWebApi.Core.Entities.Location", "Location")
                        .WithMany("Properties")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("AirBnBWebApi.Core.Entities.PropertyImage", b =>
                {
                    b.HasOne("AirBnBWebApi.Core.Entities.Property", "Property")
                        .WithMany("PropertyImages")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("AirBnBWebApi.Core.Entities.RefreshToken", b =>
                {
                    b.HasOne("AirBnBWebApi.Core.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AirBnBWebApi.Core.Entities.RefreshTokenUsed", b =>
                {
                    b.HasOne("AirBnBWebApi.Core.Entities.User", "User")
                        .WithMany("RefreshTokensUsed")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AirBnBWebApi.Core.Entities.KeyToken", "KeyToken")
                        .WithMany("RefreshTokensUsed")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KeyToken");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AirBnBWebApi.Core.Entities.Review", b =>
                {
                    b.HasOne("AirBnBWebApi.Core.Entities.Property", "Property")
                        .WithMany("Reviews")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("AirBnBWebApi.Core.Entities.UserMetadata", b =>
                {
                    b.HasOne("AirBnBWebApi.Core.Entities.User", "User")
                        .WithMany("Metadata")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AirBnBWebApi.Core.Entities.UserRole", b =>
                {
                    b.HasOne("AirBnBWebApi.Core.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirBnBWebApi.Core.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AirBnBWebApi.Core.Entities.KeyToken", b =>
                {
                    b.Navigation("RefreshTokensUsed");
                });

            modelBuilder.Entity("AirBnBWebApi.Core.Entities.Location", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("AirBnBWebApi.Core.Entities.Property", b =>
                {
                    b.Navigation("PropertyImages");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("AirBnBWebApi.Core.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("AirBnBWebApi.Core.Entities.User", b =>
                {
                    b.Navigation("KeyToken");

                    b.Navigation("Metadata");

                    b.Navigation("RefreshTokens");

                    b.Navigation("RefreshTokensUsed");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
